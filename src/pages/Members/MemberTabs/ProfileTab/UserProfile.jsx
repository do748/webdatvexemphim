import "./UserProfile.modul.scss";
import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import {
  fetchAccountByEmail,
  updateAccount,
} from "../../../../services/dataService"; // Import c√°c h√†m API
import { toast } from "react-toastify"; // Th∆∞ vi·ªán th√¥ng b√°o (toast)
import ChangePasswordModal from "../../../../components/ChangePasswordModal/ChangePassword";
import { Link } from "react-router-dom";
import { closeModal } from "../../../../utils/handleAction";
import LoadingIcon from "../../../../components/LoadingIcon";
// import { uploadImageToCloudinary } from "../../../../services/cloudinaryService"; // H√†m upload ·∫£nh l√™n Cloudinary

// Component UserProfile ƒë·ªÉ hi·ªÉn th·ªã v√† c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
export const UserProfile = () => {
  // L·∫•y th√¥ng tin user t·ª´ localStorage v√† parse th√†nh object
  const user = JSON.parse(localStorage.getItem("user"));
  const email = user?.email || ""; // L·∫•y email t·ª´ user ho·∫∑c tr·∫£ v·ªÅ chu·ªói r·ªóng n·∫øu kh√¥ng c√≥
  const [selectedImage, setSelectedImage] = useState(null); // ·∫¢nh ƒë∆∞·ª£c ch·ªçn
  const [imageURL, setImageURL] = useState(""); // URL c·ªßa ·∫£nh sau khi upload
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng t·∫£i l√™n ·∫£nh
  // const handleImageChange = (e) => {
  //   const file = e.target.files[0];
  //   if (file) {
  //     setSelectedImage(file); // L∆∞u ·∫£nh v√†o state
  //     const previewURL = URL.createObjectURL(file); // T·∫°o URL preview
  //     setImageURL(previewURL); // Hi·ªÉn th·ªã preview
  //   }
  // };

  // // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng Submit Update ·∫£nh
  // const handleUploadImage = async () => {
  //   if (!selectedImage) {
  //     alert("Vui l√≤ng ch·ªçn ·∫£nh tr∆∞·ªõc khi upload!");
  //     return;
  //   }

  //   try {
  //     const downloadURL = await uploadImageToCloudinary(selectedImage); // G·ªçi h√†m upload
  //     setImageURL(downloadURL); // C·∫≠p nh·∫≠t URL sau khi upload
  //     alert("Upload ·∫£nh th√†nh c√¥ng!");
  //   } catch (error) {
  //     console.error("L·ªói khi upload ·∫£nh:", error.message);
  //     alert("Upload ·∫£nh th·∫•t b·∫°i!");
  //   }
  // };

  // const uploadImageToCloudinary = async (file) => {
  //   const formData = new FormData();
  //   formData.append("file", file); // Th√™m file ·∫£nh v√†o formData
  //   formData.append("upload_preset", "VTICinemas_avatar"); // Thay b·∫±ng t√™n preset b·∫°n ƒë√£ t·∫°o
  //   formData.append("folder", "avatarUser"); // (T√πy ch·ªçn) Th√™m folder ƒë·ªÉ qu·∫£n l√Ω

  //   const response = await fetch(
  //     `https://api.cloudinary.com/v1_1/ddia5yfia/image/upload`, // Thay <your-cloud-name> b·∫±ng Cloud name
  //     {
  //       method: "POST",
  //       body: formData,
  //     }
  //   );

  //   if (!response.ok) {
  //     throw new Error("Upload ·∫£nh th·∫•t b·∫°i");
  //   }

  //   const data = await response.json();
  //   return data.secure_url; // URL ·∫£nh sau khi upload th√†nh c√¥ng
  // };

  // const handleSaveImageURL = async () => {
  //   try {
  //     const updatedFormData = {
  //       ...formData,
  //       avatar_url: imageURL, // Th√™m URL ·∫£nh v√†o formData
  //     };
  //     await updateAccount(updatedFormData); // G·ªçi API c·∫≠p nh·∫≠t t√†i kho·∫£n
  //     alert("C·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng!");
  //   } catch (error) {
  //     console.error("L·ªói khi c·∫≠p nh·∫≠t ·∫£nh:", error.message);
  //     alert("C·∫≠p nh·∫≠t ·∫£nh th·∫•t b·∫°i!");
  //   }
  // };
  // State ch·ª©a d·ªØ li·ªáu form ƒë·ªÉ hi·ªÉn th·ªã v√† ch·ªânh s·ª≠a
  const [formData, setFormData] = useState({
    fullname: user.fullname || user.displayName,
    email: user.email,
    phone: user.phone,
    passport: user.passport,
    birthDate: user.birth_date,
    gender: user.gender,
    city: user.city,
    district: user.district,
    address: user.address,
    avatar_url: user.avatar_url || user.photoURL, // URL ·∫£nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
  });
  // console.log(formData.avatar_url);
  // useEffect: G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng khi component render
  useEffect(() => {
    const fetchDataAccountByEmail = async () => {
      try {
        const data = await fetchAccountByEmail(email); // G·ªçi API l·∫•y th√¥ng tin
        setFormData(data); // C·∫≠p nh·∫≠t state formData v·ªõi d·ªØ li·ªáu t·ª´ API
      } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error); // Log l·ªói n·∫øu c√≥
      }
    };

    fetchDataAccountByEmail(); // G·ªçi h√†m l·∫•y d·ªØ li·ªáu
  }, [email]); // Ch·∫°y l·∫°i khi email thay ƒë·ªïi

  // X·ª≠ l√Ω khi input thay ƒë·ªïi
  const handleInputChange = (e) => {
    const { name, value } = e.target; // L·∫•y name v√† value t·ª´ input
    setFormData((prev) => ({
      ...prev,
      [name]: value, // C·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa key t∆∞∆°ng ·ª©ng trong formData
    }));
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "C·∫≠p nh·∫≠t"
  const handleSubmit = async () => {
    setIsLoading(true);
    try {
      // Lo·∫°i b·ªè c√°c gi√° tr·ªã null/undefined tr∆∞·ªõc khi g·ª≠i d·ªØ li·ªáu
      const sanitizedFormData = Object.fromEntries(
        Object.entries(formData).filter(
          ([_, value]) => value !== undefined && value !== null
        )
      );
      // Ki·ªÉm tra d·ªØ li·ªáu formData
      if (!formData || Object.keys(formData).length === 0) {
        throw new Error("formData kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë∆∞·ª£c truy·ªÅn ƒë√∫ng."); // B√°o l·ªói n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
      }
      // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin
      await updateAccount(sanitizedFormData);
      toast.success("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!"); // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin:", error.message);
      toast.error(`C·∫≠p nh·∫≠t th·∫•t b·∫°i: ${error.message}`); // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    } finally {
      setIsLoading(false); // üî• ·∫®n loading sau khi ho√†n t·∫•t
    }
  };

  return (
    <>
      <div className="profile-info-wrap">
        <div className="profile-info ">
          <h2 className="title">Th√¥ng tin c√° nh√¢n</h2>
          <form>
            {/* Khu v·ª±c t·∫£i ·∫£nh ƒë·∫°i di·ªán */}
            <div className="avatar-section">
              <img
                src={formData.avatar_url} // Hi·ªÉn th·ªã ·∫£nh ƒë·∫°i di·ªán
                alt="Avatar"
                className="avatar-preview"
              />
              <div>
                <label htmlFor="avatar" className="upload-btn">
                  T·∫£i ·∫£nh l√™n
                </label>
                <input
                  accept="image/*"
                  className="input-modal"
                  type="file"
                  id="avatar"
                  style={{ display: "none" }}
                  // onChange={handleImageChange} // X·ª≠ l√Ω khi t·∫£i ·∫£nh
                />
                <button
                  type="button"
                  className="save-btn "
                  // onClick={handleUploadImage} // Th√¥ng b√°o t·∫°m th·ªùi
                >
                  L∆∞u ·∫£nh
                </button>
              </div>
            </div>

            {/* Form ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n */}
            <div className="form-grid">
              <div>
                <label>H·ªç t√™n</label>
                <input
                  className="input-modal"
                  type="text"
                  name="fullname"
                  value={formData.fullname}
                  onChange={handleInputChange}
                />
              </div>
              <div>
                <label>Email</label>
                <input
                  readOnly // Kh√¥ng cho ph√©p ch·ªânh s·ª≠a email
                  className="input-modal"
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                />
              </div>
              <div>
                <label>S·ªë ƒëi·ªán tho·∫°i</label>
                <input
                  className="input-modal"
                  type="text"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                />
              </div>
              <div>
                <label>CMND/H·ªô chi·∫øu</label>
                <input
                  className="input-modal"
                  type="text"
                  name="passport"
                  value={formData.passport}
                  onChange={handleInputChange}
                />
              </div>
              <div>
                <label>Ng√†y sinh</label>
                <input
                  className="input-modal"
                  type="date"
                  name="birthDate"
                  value={formData.birthDate}
                  onChange={handleInputChange}
                />
              </div>
              <div>
                <label>Gi·ªõi t√≠nh</label>
                <select
                  name="gender"
                  value={formData.gender}
                  onChange={handleInputChange}
                >
                  <option value="Nam">Nam</option>
                  <option value="N·ªØ">N·ªØ</option>
                </select>
              </div>
              <div>
                <label>T·ªânh/Th√†nh ph·ªë</label>
                <input
                  className="input-modal"
                  type="text"
                  name="city"
                  value={formData.city}
                  onChange={handleInputChange}
                />
              </div>
              <div>
                <label>Qu·∫≠n/Huy·ªán</label>
                <input
                  className="input-modal"
                  type="text"
                  name="district"
                  value={formData.district}
                  onChange={handleInputChange}
                />
              </div>
              <div className="address-field">
                <label>ƒê·ªãa ch·ªâ</label>
                <input
                  className="input-modal"
                  type="text"
                  name="address"
                  value={formData.address}
                  onChange={handleInputChange}
                />
              </div>
            </div>

            {/* Link ƒë·ªïi m·∫≠t kh·∫©u */}
            <div className="change-password">
              <Link href="!#" onClick={() => setIsModalOpen(true)}>
                ƒê·ªïi m·∫≠t kh·∫©u?
              </Link>
              <ChangePasswordModal
                isOpen={isModalOpen}
                onClose={() => {
                  closeModal(); // G·ªçi h√†m ƒë√≥ng t·ª´ handleAction
                  setIsModalOpen(false); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªÉ tr√°nh xung ƒë·ªôt
                }}
              />
            </div>

            {/* N√∫t c·∫≠p nh·∫≠t */}
            <button
              onClick={handleSubmit}
              type="button"
              className="update-btn"
              disabled={isLoading}
            >
              {isLoading ? <LoadingIcon size={10} /> : "C·∫≠p nh·∫≠t"}
            </button>
          </form>
        </div>
      </div>
    </>
  );
};
